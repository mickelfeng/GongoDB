{"tagline":"GongoDB is a SQL friendly ORM for PHP 5 that has named_scope and fluent query builder.   It assembles a query by combining named_scope as a fragment of SQL.   It is suitable for building complicated SQL dynamically.   ","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"GongoDB","google":"UA-37105453-1","body":"GongoDB\r\n================================================================\r\nGongoDB is a SQL friendly ORM for PHP 5 that has named_scope and fluent query builder.  \r\nIt assembles a query by combining named_scope as a fragment of SQL.  \r\nIt is suitable for building complicated SQL dynamically.  \r\n\r\n\r\nSetup\r\n----------------------------------------------------------------\r\nGongoDB uses PDO extension to connect databases.\r\n\r\n    include \"gongo.php\";\r\n    $pdo = new PDO(\"mysql:host=localhost;dbname=dbname\", \"user\", \"password\");\r\n    $db = new Gongo_Db($pdo);\r\n\r\n\r\nDefine Data Mapper\r\n------------------------------------------------------------------------\r\nNamed_scope is defined in a data mapper class.\r\n\r\n    class Mapper_Book extends Gongo_Db_Mapper\r\n    {\r\n        protected $table = \"books\";\r\n        protected $namedScopes = array(\r\n            'bookProperty' => array(\r\n                'select' => array('book.id AS id', 'book.title AS title'),\r\n            ),\r\n            'bookAuthor' => array(\r\n                'bookProperty',                     // reuse of named_scope\r\n                'select' => array('author.name AS author_name'),\r\n                'join' => array('author ON author.id = author_id'),\r\n                'entityclass' => 'Model_Book',      // named_scope can have entity class in each.\r\n            ),\r\n            'byAuthorName' => array(\r\n                'where' => array('author.name = :name'),\r\n                'params' => ':name', // order of a named parameter\r\n            ),\r\n            'findByAuthorName' => array(\r\n                'bookAuthor', 'byAuthorName',\r\n            ),\r\n        );\r\n    }\r\n\r\n\r\nDefine Entity Class (Model Class)\r\n------------------------------------------------------------------------\r\nNamed_scope can have entity class in each.  \r\nGongo_Bean is used as entity class when not specifying an entity class in data mapper class.\r\n\r\n    class Model_Book extends Gongo_Bean\r\n    {\r\n        function toString()\r\n        {\r\n            return \"Title:{$this->title} Authorï¼š{$this->author_name}\";\r\n        }\r\n    }\r\n\r\n\r\nLoad an Entity by Primary Key\r\n------------------------------------------------------------------------\r\n\r\n    $bookMapper = $db->Book;        // instantiate mapper class\r\n    $book = $bookMapper->get(1);    // load an entity\r\n\r\n\r\nSave an Entity\r\n------------------------------------------------------------------------\r\n\r\n    $authorMapper = $db->Author;    // instantiate mapper class\r\n    $author = $authorMapper->get(); // instantiate empty entity\r\n    $author->name = \"William Gibson\";\r\n    $authorMapper->save($author);   // save an entity\r\n\r\n\r\nFind an Entity by using named_scope\r\n------------------------------------------------------------------------\r\n\r\n    $book = $bookMapper->q()->findByAuthorName->first('William Gibson');\r\n    // chain of named_scopes\r\n    $book = $bookMapper->q()->bookAuthor->byAuthorName->first('William Gibson');\r\n\r\n\r\nFind all Entities by using named_scope\r\n------------------------------------------------------------------------\r\n\r\n    // $books = $bookMapper->q()->findByAuthorName->all('William Gibson');\r\n    // 'all' method is omissible\r\n    $books = $bookMapper->q()->findByAuthorName('William Gibson');\r\n    // result object is a lazy iterator so sql is not executed yet\r\n    foreach ($books as $book) {\r\n        // sql is executed when iteration has started\r\n        echo $book->toString() . \"\\n\";\r\n    }\r\n\r\n\r\nLIMIT & ORDER\r\n------------------------------------------------------------------------\r\n\r\n    $books = $bookMapper->q()->findByAuthorName->limit(10)->orderBy('title ASC')->all('William Gibson');\r\n\r\nYou may replace an order. \r\n\r\n    $books = $bookMapper->q()->limit(10)->orderBy('title ASC')->findByAuthorName('William Gibson');\r\n\r\n\r\nSubQuery\r\n------------------------------------------------------------------------\r\n\r\n### Nested Definition ###\r\n\r\n    class Mapper_Departments extends Gongo_Db_Mapper\r\n    {\r\n        protected $table = \"departments\";\r\n        protected $namedScopes = array(\r\n            'findDepartmentsByEmployeesAge' => array(\r\n                'where' => array(\r\n                    '#id IN' => array(\r\n                        // nested definition in named_scope\r\n                        'select' => array('department_id'),\r\n                        'from' => array('employees'),\r\n                        'where' => array('age = :age'),\r\n                    ),\r\n                ),\r\n                'params' => ':age',\r\n            ),\r\n        );\r\n    }\r\n\r\n\r\n### Using another scope ###\r\n\r\n    class Mapper_Departments extends Gongo_Db_Mapper\r\n    {\r\n        protected $table = \"departments\";\r\n        protected $namedScopes = array(\r\n            'findByEmployeesAge' => array(\r\n                // using another named_scope\r\n                'where' => array('#id IN' => array('departmentIdsByEmployeesAge')),\r\n                'params' => ':age',\r\n            ),\r\n            'departmentIdsByEmployeesAge' => array(\r\n                'select' => array('department_id'),\r\n                'from' => array('employees'),\r\n                'where' => array('age = :age'),\r\n            ),\r\n        );\r\n    }\r\n\r\n\r\n\"AND\" and \"OR\" operators in WHERE clause\r\n------------------------------------------------------------------------\r\n\r\n    class Mapper_Employees extends Gongo_Db_Mapper\r\n    {\r\n        protected $table = \"employees\";\r\n        protected $namedScopes = array(\r\n            'ageAndSex' => array(\r\n                'where' => array('age = :age','sex = :sex'),\r\n    //          'where' => array(array('$and' => array('age = :age','sex = :sex'))),\r\n            ),\r\n            'ageOrSex' => array(\r\n                'where' => array(array('$or' => array('age = :age','sex = :sex'))),\r\n            ),\r\n        );\r\n    }\r\n\r\n\r\nLicense\r\n------------------------------------------------------------------------\r\nGongoDB is dual Licensed MIT and GPLv3. You may choose the license that fits best for your project.\r\n\r\nWhat is Gongo?\r\n------------------------------------------------------------------------\r\n* \"Gongo\" means a [\"Kappa\"][1] in the dialect of the Tsuyama region at Okayama prefecture in Japan. \r\n* There is no relationship with MongoDB.\r\n\r\n[1]:http://en.wikipedia.org/wiki/Kappa_(folklore)\r\n"}